from odoo import api, fields, models
from odoo.exceptions import ValidationError

class EstatePropertyOffer(models.Model):
    _name = "estate.property.offer"
    _description = "Property Offer"
    _order = "price desc, id desc"

    property_id = fields.Many2one(
        "estate.property",
        string="Property",
        required=True,
        ondelete="cascade",
        index=True,
    )
    partner_id = fields.Many2one("res.partner", string="Buyer", required=True)
    currency_id = fields.Many2one(
        "res.currency",
        default=lambda self: self.env.company.currency_id.id,
        required=True,
    )
    price = fields.Monetary(required=True, currency_field="currency_id")
    validity = fields.Integer(string="Validity (days)", default=7)

    status = fields.Selection(
        [('new','New'), ('accepted','Accepted'), ('refused','Refused')],
        default='new', required=True, index=True
    )

    # Basic guarantees
    @api.constrains('price')
    def _check_price_positive(self):
        for rec in self:
            if rec.price is None or rec.price <= 0:
                raise ValidationError("Offer price must be strictly positive.")

    def action_accept(self):
        for rec in self:
            # ensure only one accepted per property
            others = rec.property_id.offer_ids.filtered(lambda o: o.id != rec.id and o.status == 'accepted')
            if others:
                raise ValidationError("Another offer is already accepted for this property.")
            rec.status = 'accepted'
            # reflect state on property
            if rec.property_id.state not in ('sold','canceled'):
                rec.property_id.state = 'offer_accepted'
        return True

    def action_refuse(self):
        for rec in self:
            rec.status = 'refused'
            if rec.property_id and rec.property_id.state == 'offer_accepted':
                # if the accepted one gets refused, fallback to offer_received when any other non-refused exists
                remaining = rec.property_id.offer_ids.filtered(lambda o: o.status != 'refused')
                rec.property_id.state = 'offer_received' if remaining else 'new'
        return True
