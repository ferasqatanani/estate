# /home/feras/tutorials/estate/models/property.py
from odoo import api, fields, models
from odoo.exceptions import ValidationError
from datetime import date, timedelta

class EstateProperty(models.Model):
    _name = "estate.property"
    _description = "Real Estate Property"
    _order = "id desc"

    # --- Basics (already in your file) ---
    name = fields.Char(string="Title", required=True)
    description = fields.Text(string="Description")
    postcode = fields.Char(string="Postcode")

    # Day 8: default availability = today + 90 days
    date_availability = fields.Date(
        string="Available From",
        default=lambda self: date.today() + timedelta(days=90),
        copy=False,
        help="Default is 90 days from today."
    )

    expected_price = fields.Float(string="Expected Price", required=True)
    selling_price = fields.Float(string="Selling Price", readonly=True, copy=False)

    bedrooms = fields.Integer(string="Bedrooms", default=2)
    living_area = fields.Integer(string="Living Area (sqm)")
    facades = fields.Integer(string="Facades")
    garage = fields.Boolean(string="Has Garage?")
    garden = fields.Boolean(string="Has Garden?")
    garden_area = fields.Integer(string="Garden Area (sqm)")
    garden_orientation = fields.Selection(
        string="Garden Orientation",
        selection=[
            ("north", "North"),
            ("south", "South"),
            ("east", "East"),
            ("west", "West"),
        ],
    )

    # --- Day 7 relations (you already added these) ---
    property_type_id = fields.Many2one("estate.property.type", string="Property Type")
    tag_ids = fields.Many2many("estate.property.tag", string="Tags")
    salesperson_id = fields.Many2one("res.users", string="Salesperson", default=lambda self: self.env.user)
    buyer_id = fields.Many2one("res.partner", string="Buyer")

    # --- Day 8: Computed fields ---
    # Total area = living + garden (read-only)
    total_area = fields.Integer(
        string="Total Area (sqm)",
        compute="_compute_total_area",
        store=True
    )

    # Best price suggestion (e.g., 90% of expected)
    best_price = fields.Float(
        string="Suggested Best Price",
        compute="_compute_best_price",
        store=True,
        help="Automatic suggestion (e.g., 90% of expected)."
    )

    @api.depends("living_area", "garden_area")
    def _compute_total_area(self):
        for rec in self:
            la = rec.living_area or 0
            ga = rec.garden_area or 0
            rec.total_area = la + ga

    @api.depends("expected_price")
    def _compute_best_price(self):
        for rec in self:
            rec.best_price = (rec.expected_price or 0.0) * 0.90

    # --- Day 8: Onchange handlers ---
    @api.onchange("garden")
    def _onchange_garden(self):
        """If garden is checked, set defaults; if not, clear fields."""
        if self.garden:
            # put sensible defaults if user just checked garden
            if not self.garden_area:
                self.garden_area = 10
            if not self.garden_orientation:
                self.garden_orientation = "north"
        else:
            # user unchecked garden → clear garden-specific fields
            self.garden_area = 0
            self.garden_orientation = False

    # --- Day 8: Constraints ---
    _sql_constraints = [
        ("check_expected_price_positive",
         "CHECK(expected_price > 0)",
         "Expected price must be strictly positive."),
        # selling_price can be 0/empty (not sold yet) but if set, keep it positive
        ("check_selling_price_non_negative",
         "CHECK(selling_price >= 0)",
         "Selling price must be non-negative."),
    ]

    @api.constrains("selling_price", "expected_price")
    def _check_selling_not_above_expected(self):
        for rec in self:
            if rec.selling_price and rec.expected_price and rec.selling_price > rec.expected_price:
                raise ValidationError("Selling Price cannot be greater than Expected Price.")

# Day 9 — workflow state + actions
state = fields.Selection(
    [
        ("new", "New"),
        ("sold", "Sold"),
        ("canceled", "Canceled"),
    ],
    string="Status",
    required=True,
    default="new",
    copy=False,
)

def action_mark_sold(self):
    for rec in self:
        if rec.state == "canceled":
            raise ValidationError("Canceled properties cannot be sold.")
        rec.state = "sold"
    return True

def action_mark_canceled(self):
    for rec in self:
        if rec.state == "sold":
            raise ValidationError("Sold properties cannot be canceled.")
        rec.state = "canceled"
    return True
